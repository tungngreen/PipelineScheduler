# Use the base image
ARG JETPACK_VERSION="r36.4.0"
# r36.4.0-py3 for the orins
# r35.2.1-py3 for the xaviers

FROM nvcr.io/nvidia/l4t-jetpack:${JETPACK_VERSION}


# Install required packages
RUN apt update && apt install -y \
        build-essential \
        wget \
        vim \
        && rm -rf /var/llib/apt/list/*

RUN wget https://cmake.org/files/v3.25/cmake-3.25.2-linux-aarch64.sh -q -O /tmp/cmake-install.sh
RUN chmod u+x /tmp/cmake-install.sh
RUN mkdir /opt/cmake-3.25.1
RUN /tmp/cmake-install.sh --skip-license --prefix=/opt/cmake-3.25.1
RUN ln -s /opt/cmake-3.25.1/bin/* /usr/local/bin


# Install gRPC 1.62.0
ARG GRPC_INSTALL_DIR=/grpc
RUN mkdir -p ${GRPC_INSTALL_DIR}
RUN apt-get update
RUN apt-get -y install autoconf libtool git
RUN git clone --recurse-submodules -b v1.62.0 --depth 1 --shallow-submodules https://github.com/grpc/grpc /grpc-src
RUN cd /grpc-src && \
    mkdir -p third_party/abseil-cpp/cmake/build && \
    cd third_party/abseil-cpp/cmake/build && \
    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_POSITION_INDEPENDENT_CODE=TRUE ../.. && \
    make "-j${GRPC_CPP_DISTRIBTEST_BUILD_COMPILER_JOBS}" install

RUN cd /grpc-src && \
    mkdir -p "third_party/cares/cares/cmake/build" && \
    cd third_party/cares/cares/cmake/build && \
    cmake -DCMAKE_BUILD_TYPE=Release ../.. && \
    make "-j${GRPC_CPP_DISTRIBTEST_BUILD_COMPILER_JOBS}" install

RUN cd /grpc-src && \
    mkdir -p "third_party/protobuf/cmake/build" && \
    cd "third_party/protobuf/cmake/build" && \
    cmake -Dprotobuf_BUILD_SHARED_LIBS=ON -Dprotobuf_BUILD_TESTS=OFF -DCMAKE_BUILD_TYPE=Release -Dprotobuf_ABSL_PROVIDER=package ../.. && \
    make "-j4" install


RUN cd /grpc-src && \
    mkdir -p "third_party/re2/cmake/build" && \
    cd "third_party/re2/cmake/build" && \
    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_POSITION_INDEPENDENT_CODE=TRUE ../.. && \
    make "-j${GRPC_CPP_DISTRIBTEST_BUILD_COMPILER_JOBS}" install

RUN cd /grpc-src && \
    mkdir -p "third_party/zlib/cmake/build" && \
    cd "third_party/zlib/cmake/build" && \
    cmake -DCMAKE_BUILD_TYPE=Release ../.. && \
    make "-j${GRPC_CPP_DISTRIBTEST_BUILD_COMPILER_JOBS}" install

RUN apt-get update && apt-get install -y libssl-dev

RUN cd /grpc-src && \
    git submodule update --init && \
    mkdir -p cmake/build && \
    cd cmake/build && \
    cmake -DgRPC_INSTALL=ON                \
              -DCMAKE_BUILD_TYPE=Release       \
              -DgRPC_ABSL_PROVIDER=package     \
              -DgRPC_CARES_PROVIDER=package    \
              -DgRPC_PROTOBUF_PROVIDER=package \
              -DgRPC_RE2_PROVIDER=package      \
              -DgRPC_SSL_PROVIDER=package      \
              -DgRPC_ZLIB_PROVIDER=package     \
              -DBUILD_DEPS=ON \
              -DCMAKE_INSTALL_PREFIX=$GRPC_INSTALL_DIR \
      ../.. && \
    make -j 8 && \
    make install
ENV PATH="${PATH}:${GRPC_INSTALL_DIR}/bin"

# Install Boost
RUN apt update
RUN apt-get install build-essential g++ python3-dev autotools-dev libicu-dev libbz2-dev libboost-all-dev -y

# Install spdlog
RUN apt install libspdlog-dev libpqxx-dev -y

# Install posgresql-client
RUN apt install postgresql-client -y

# # Store load time model
# ARG upload_model="upload_model_agx.txt"
# ARG download_model="download_model_agx.txt"
# COPY ${upload_model} /ltmodel
# COPY ${download_model} /ltmodel

# # Install LightGBM
# ARG LIGHTGBM_SRC_DIR=/lightgbm-src
# RUN mkdir -p ${LIGHTGBM_SRC_DIR}
# RUN cd lightgbm-src
# RUN git clone --recursive https://github.com/microsoft/LightGBM && \
#     cd LightGBM && \
#     cmake -B build -S . -DCMAKE_INSTALL_PREFIX=/usr && \
#     cmake --build build -j4 && \
#     cmake --install build

RUN apt update
RUN apt install gdb -y

RUN apt install python3-pip -y

# Install LibcuSPARSElt for torch higher than 2.1
ENV LIBSPARSE_LT=libsparselt
ENV LIBSPARSE_LT_LINK=https://developer.download.nvidia.com/compute/cusparselt/redist/libcusparse_lt/linux-aarch64/libcusparse_lt-linux-aarch64-0.6.3.2-archive.tar.xz
RUN wget -O ${LIBSPARSE_LT}.tar.xz ${LIBSPARSE_LT_LINK}
RUN mkdir ${LIBSPARSE_LT} && tar --strip-components=1 -xvf ${LIBSPARSE_LT}.tar.xz -C /${LIBSPARSE_LT} && rm libsparselt.tar.xz

ENV LD_LIBRARY_PATH="/${LIBSPARSE_LT}/lib:$LD_LIBRARY_PATH"
RUN pip3 install numpy==1.26.1
ENV TORCH_VERSION=torch-2.5.0a0+872d972e41.nv24.08.17622132-cp310-cp310-linux_aarch64.whl
ENV TORCH_LINK=https://developer.download.nvidia.com/compute/redist/jp/v61/pytorch/torch-2.5.0a0+872d972e41.nv24.08.17622132-cp310-cp310-linux_aarch64.whl

RUN wget -O ${TORCH_VERSION} ${TORCH_LINK} 
RUN pip3 install ${TORCH_VERSION}

# Install OpenCV built with GPU Support
ENV OPENCV_VERSION=4.10.0
RUN apt -y purge *libopencv*
RUN apt-get install -y unzip libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libv4l-dev v4l-utils qv4l2
RUN wget -O opencv.zip https://github.com/opencv/opencv/archive/refs/tags/${OPENCV_VERSION}.zip && unzip opencv.zip
RUN wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/refs/tags/${OPENCV_VERSION}.zip && unzip opencv_contrib.zip
RUN mkdir opencv-${OPENCV_VERSION}/release
RUN cd opencv-${OPENCV_VERSION}/release && cmake -D WITH_CUDA=ON -D WITH_CUDNN=ON -D CUDA_ARCH_BIN="8.7" -D CUDA_ARCH_PTX="" -D OPENCV_GENERATE_PKGCONFIG=ON -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-${OPENCV_VERSION}/modules -D WITH_GSTREAMER=ON -D WITH_LIBV4L=ON -D BUILD_opencv_python3=ON -D BUILD_TESTS=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_EXAMPLES=OFF -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local .. && make -j$(nproc) install

ARG user=soulsaver
ARG host_uid=1000
ARG host_gid=1000

RUN groupadd -g $host_gid ${user}
RUN useradd -u $host_uid -g ${user} ${user}
RUN usermod -aG video ${user}
RUN echo '%sudo ALL(ALL:ALL) ALL' >> /etc/sudoers
RUN mkdir /home/${user}
RUN chown -R ${user}:${user} /home/${user}

USER ${user}

ENV HOME=/home/${user}

CMD [ "/bin/bash" ]
